{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","switchAuthModeHandler","setState","prevState","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","formIsValid","inputIdentifier","orderForm","submitHandler","preventDefault","props","onAuth","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","errorId","changed","loading","authRedirect","isAuthenticated","to","className","classes","error","message","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","validationError","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.137260f2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\n\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components/UI/Input/Input';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport {updateObject, checkValidity} from '../../shared/utility';\n\nclass Auth extends Component {\n    state = {\n        controls : {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6,\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        isSignup: true,\n    };\n\n    componentDidMount(){\n        //if we are not building a burger and we are not at homepage, then redirect to homepage\n        if(!this.props.buildingBurger && this.props.authRedirectPath!=='/'){\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup: !prevState.isSignup}\n        })\n    };\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName]: updateObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation), //this will turn state.valid to true\n                touched: true,\n            })\n        });\n\n        this.setState({controls: updatedControls});\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedControls) {\n            formIsValid = updatedControls[inputIdentifier].valid && formIsValid;}\n            \n        this.setState({orderForm: updatedControls, formIsValid: formIsValid});\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    render () {\n        const formElementsArray=[];\n        for(let key in this.state.controls){\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key],\n            })\n        };\n\n        let form = formElementsArray.map(formElement=>(\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                errorId={formElement.config.elementConfig.placeholder}\n                changed={(event)=>this.inputChangedHandler(event, formElement.id)}/>\n            ));\n\n        if(this.props.loading){\n            form = <Spinner />\n            };\n\n        let authRedirect = null;\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to={this.props.authRedirectPath}/> \n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {this.props.error ? <p>{this.props.error.message}</p> : null}\n                <form onSubmit={this.submitHandler}>                \n                    {form}\n                    <Button btnType=\"Success\" >SUBMIT</Button>\n                </form>\n                <Button \n                clicked = {this.switchAuthModeHandler}\n                btnType='Danger'> SWITCH TO {this.state.isSignup ? 'SIGN IN' : 'SIGN UP'} </Button>\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return{\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token != null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        onAuth : (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n        //if user click through 'authentication' always reset the url, so hard coding is fine\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n    let inputElement = null;\n\n    const inputClasses = [classes.InputElement];\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n\n    let validationError=null;\n    if(props.invalid && props.shouldValidate && props.touched){\n        validationError = <p> Please key in '{props.errorId}'</p>\n    }\n\n    switch(props.elementType){\n        case('input'):\n            inputElement = <input \n            className={inputClasses.join(' ')} \n            {...props.elementConfig} \n            value={props.value}\n            onChange={props.changed}/>;\n            break;\n        case('textarea'):\n            inputElement = <textarea             \n            className={inputClasses.join(' ')} \n            {...props.elementConfig} \n            value={props.value}\n            onChange={props.changed}/>;\n            break;\n        case('select'):\n            inputElement = <select         \n            className={inputClasses.join(' ')} \n            value={props.value}\n            onChange={props.changed}>\n            {props.elementConfig.options.map(option=>{\n                return(\n                    <option key={option.value} value={option.value}> \n                        {option.displayValue} \n                    </option>\n                )\n            })}\n            </select>;\n            break;\n        default:\n            inputElement = <input             \n            className={inputClasses.join(' ')} \n            value={props.value}/>;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    )\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};"],"sourceRoot":""}