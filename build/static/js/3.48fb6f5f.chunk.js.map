{"version":3,"sources":["containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","margin","width","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinue","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","key","order","ing","price","totalP","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","errorId","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinueHandler","summary","to","ings","purchasedRedirect","purchased","path","match","url","component","input","inputElement","inputClasses","InputElement","Invalid","validationError","join","onChange","option","Label","label"],"mappings":"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","file":"static/js/3.48fb6f5f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css';\n\nconst checkoutSummary = (props) => {\n    return(\n        <div className={classes.CheckoutSummary}>\n            <h1> We hope you'll like the burger!</h1>\n\n            <div style={{margin: 'auto', width: '100%'}}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n\n            <Button \n            btnType='Danger' \n            clicked={props.checkoutCancelled} >CANCEL</Button>\n            <Button \n            btnType='Success' \n            clicked={props.checkoutContinue} >CONTINUE</Button>\n\n        </div>\n    )\n}\n\nexport default checkoutSummary;","import React , {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport * as actions from '../../../store/actions/index';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport {updateObject, checkValidity} from '../../../shared/utility';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {   \n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue:'Fastest'},\n                        {value: 'cheapest', displayValue:'Cheapest'}\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true,\n            },\n        },\n        formIsValid: true,\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for (let key in this.state.orderForm){\n            formData[key]=this.state.orderForm[key].value;\n        }\n        const order = {\n            ingredients: this.props.ing, \n            price: this.props.totalP,\n            orderData: formData,\n            userId: this.props.userId\n        };\n        this.props.onOrderBurger(order, this.props.token);\n    };\n\n\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation), //this will return true\n            touched: true ,\n        });\n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updatedFormElement\n        })\n        // console.log(updatedFormElement);\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;}\n            \n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n\n    render () {\n        const formElementsArray=[];\n        for(let key in this.state.orderForm){\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key],\n            })\n        };\n        let form = (\n            <form onSubmit={this.orderHandler}>\n              {formElementsArray.map(formElement=>(\n                  <Input \n                  key={formElement.id}\n                  elementType={formElement.config.elementType}\n                  elementConfig={formElement.config.elementConfig}\n                  value={formElement.config.value}\n                  invalid={!formElement.config.valid}\n                  shouldValidate={formElement.config.validation}\n                  touched={formElement.config.touched}\n                  errorId={formElement.config.elementConfig.placeholder}\n                  changed={(event)=>this.inputChangedHandler(event, formElement.id)}/>\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        ); \n        if(this.props.loading){\n            form = <Spinner />\n        };\n        return (\n          <div className={classes.ContactData}>\n            <h4> Please enter your Contact Data</h4>\n            {form}\n          </div>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        ing: state.burgerBuilder.ingredients,\n        totalP: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token)),\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));","import React, {Component} from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from '../Checkout/ContactData/ContactData';\n\nclass Checkout extends Component {\n    checkoutCancelledHandler = () => (\n        this.props.history.goBack()\n    );\n\n    checkoutContinueHandler = () => (\n        this.props.history.push('checkout/contact-data')\n    );\n    \n    render(){\n        let  summary = <Redirect to ='/'/>\n        if(this.props.ings){\n            const purchasedRedirect = this.props.purchased ? <Redirect to ='/'/> : null;\n            summary = (\n                <div>\n                    {purchasedRedirect}\n                    <CheckoutSummary \n                    ingredients={this.props.ings}\n                    checkoutCancelled={this.checkoutCancelledHandler} \n                    checkoutContinue={this.checkoutContinueHandler}\n                    />\n                    <Route path={this.props.match.url + '/contact-data'} component={ContactData} />\n                </div>\n            )\n        }\n        return summary\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        totalP: state.burgerBuilder.totalPrice,\n        purchased: state.order.purchased\n    }\n}\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\nimport classes from './Input.module.css';\n\nconst input = (props) => {\n    let inputElement = null;\n\n    const inputClasses = [classes.InputElement];\n    if(props.invalid && props.shouldValidate && props.touched){\n        inputClasses.push(classes.Invalid)\n    }\n\n    let validationError=null;\n    if(props.invalid && props.shouldValidate && props.touched){\n        validationError = <p> Please key in '{props.errorId}'</p>\n    }\n\n    switch(props.elementType){\n        case('input'):\n            inputElement = <input \n            className={inputClasses.join(' ')} \n            {...props.elementConfig} \n            value={props.value}\n            onChange={props.changed}/>;\n            break;\n        case('textarea'):\n            inputElement = <textarea             \n            className={inputClasses.join(' ')} \n            {...props.elementConfig} \n            value={props.value}\n            onChange={props.changed}/>;\n            break;\n        case('select'):\n            inputElement = <select         \n            className={inputClasses.join(' ')} \n            value={props.value}\n            onChange={props.changed}>\n            {props.elementConfig.options.map(option=>{\n                return(\n                    <option key={option.value} value={option.value}> \n                        {option.displayValue} \n                    </option>\n                )\n            })}\n            </select>;\n            break;\n        default:\n            inputElement = <input             \n            className={inputClasses.join(' ')} \n            value={props.value}/>;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n            {validationError}\n        </div>\n    )\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};"],"sourceRoot":""}