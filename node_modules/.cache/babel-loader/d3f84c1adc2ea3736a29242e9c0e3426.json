{"ast":null,"code":"var _jsxFileName = \"/Users/jovangoh/Desktop/myburger-react/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your E-mail'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: ''\n        }\n      },\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault(); //As a default in <Form> it will rerender itself, so we prevent the default\n\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let key in this.state.orderForm) {\n        formData[key] = this.state.orderForm[key].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order) //.json for firebase only\n      .then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.history.push('/');\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      console.log(updatedFormElement);\n      this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })), React.createElement(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"ORDER\"));\n\n    if (this.state.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      });\n    }\n\n    ;\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \" Please enter your Contact Data\"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/jovangoh/Desktop/myburger-react/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","classes","axios","Spinner","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","maxLength","valid","street","zipCode","country","email","deliveryMethod","options","displayValue","loading","orderHandler","event","preventDefault","setState","formData","key","order","ingredients","props","price","orderData","post","then","response","history","push","catch","error","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","console","log","rules","isValid","trim","length","render","formElementsArray","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React , {Component} from 'react';\n\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {   \n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your E-mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue:'Fastest'},\n                        {value: 'cheapest', displayValue:'Cheapest'}\n                    ]\n                },\n                value: ''\n            },\n        },\n        loading: false,\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        //As a default in <Form> it will rerender itself, so we prevent the default\n        this.setState({loading: true})\n        const formData = {};\n        for (let key in this.state.orderForm){\n            formData[key]=this.state.orderForm[key].value;\n        }\n        const order = {\n            ingredients: this.props.ingredients, \n            price: this.props.price,\n            orderData: formData}\n        axios.post('/orders.json', order) //.json for firebase only\n            .then(response => {\n                this.setState({loading: false});\n                this.props.history.push('/');\n            })\n            .catch(error => {\n                this.setState({loading: false})\n            })\n    };\n\n    checkValidity(value,rules){\n        let isValid = true;\n        if(rules.required){\n            isValid = value.trim() !== '' && isValid;\n        }\n        if(rules.minLength){\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if(rules.maxLength){\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {...this.state.orderForm};\n        const updatedFormElement = {...updatedOrderForm[inputIdentifier]};\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        console.log(updatedFormElement);\n        this.setState({orderForm:updatedOrderForm})\n    }\n\n    render () {\n        const formElementsArray=[];\n        for(let key in this.state.orderForm){\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key],\n            })\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n              {formElementsArray.map(formElement=>(\n                  <Input \n                  key={formElement.id}\n                  elementType={formElement.config.elementType}\n                  elementConfig={formElement.config.elementConfig}\n                  value={formElement.config.value}\n                  invalid={!formElement.config.valid}\n                  shouldValidate={formElement.config.validation}\n                  changed={(event)=>this.inputChangedHandler(event, formElement.id)}/>\n                ))}\n              <Button btnType=\"Success\">ORDER</Button>\n            </form>\n        ); \n        if(this.state.loading){\n            form = <Spinner />\n        };\n        return (\n          <div className={classes.ContactData}>\n            <h4> Please enter your Contact Data</h4>\n            {form}\n          </div>\n        );\n    }\n}\n\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}