{"ast":null,"code":"var _jsxFileName = \"/Users/jovangoh/Desktop/myburger-react-redux/src/containers/Orders/Orders.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Orders extends Component {\n  componentDidMount() {\n    this.props.onFetchOrder();\n  }\n\n  render() {\n    let orders = React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    });\n\n    if (!this.props.loading) {\n      orders = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, this.props.orders.map(order => React.createElement(Order, {\n        key: order.id,\n        price: +order.price,\n        ingredients: order.ingredients,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      })));\n    }\n\n    ;\n    return orders;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.order.orders,\n    loading: state.order.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrder: () => dispatch(actions.fetchOrders)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","map":{"version":3,"sources":["/Users/jovangoh/Desktop/myburger-react-redux/src/containers/Orders/Orders.js"],"names":["React","Component","connect","Order","axios","withErrorHandler","actions","Spinner","Orders","componentDidMount","props","onFetchOrder","render","orders","loading","map","order","id","price","ingredients","mapStateToProps","state","mapDispatchToProps","dispatch","fetchOrders"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAEA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,OAAOC,OAAP,MAAoB,qCAApB;;AAEA,MAAMC,MAAN,SAAqBP,SAArB,CAA+B;AAC3BQ,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWC,YAAX;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAIC,MAAM,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;;AACA,QAAG,CAAC,KAAKH,KAAL,CAAWI,OAAf,EAAuB;AACnBD,MAAAA,MAAM,GACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,KAAKH,KAAL,CAAWG,MAAX,CAAkBE,GAAlB,CAAsBC,KAAK,IACxB,oBAAC,KAAD;AACA,QAAA,GAAG,EAAEA,KAAK,CAACC,EADX;AAEA,QAAA,KAAK,EAAE,CAACD,KAAK,CAACE,KAFd;AAGA,QAAA,WAAW,EAAGF,KAAK,CAACG,WAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,CADD,CADJ;AASH;;AAAA;AACL,WAAON,MAAP;AACC;;AAnB0B;;AAsB/B,MAAMO,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAM;AACFR,IAAAA,MAAM,EAAEQ,KAAK,CAACL,KAAN,CAAYH,MADlB;AAEFC,IAAAA,OAAO,EAAEO,KAAK,CAACL,KAAN,CAAYF;AAFnB,GAAN;AAIH,CALD;;AAOA,MAAMQ,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHZ,IAAAA,YAAY,EAAE,MAAMY,QAAQ,CAACjB,OAAO,CAACkB,WAAT;AADzB,GAAP;AAGH,CAJD;;AAMA,eAAetB,OAAO,CAACkB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CjB,gBAAgB,CAACG,MAAD,EAAQJ,KAAR,CAA7D,CAAf","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux'\n\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Orders extends Component {\n    componentDidMount() {\n        this.props.onFetchOrder()\n    }\n\n    render() {\n        let orders = <Spinner />\n        if(!this.props.loading){\n            orders = (\n                <div>\n                {this.props.orders.map(order => ( \n                    <Order \n                    key={order.id}\n                    price={+order.price}\n                    ingredients= {order.ingredients} />))}\n                </div>\n            )\n        };\n    return orders\n    }\n}\n\nconst mapStateToProps = state => {\n    return{\n        orders: state.order.orders,\n        loading: state.order.loading\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrder: () => dispatch(actions.fetchOrders)\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders,axios));"]},"metadata":{},"sourceType":"module"}