{"ast":null,"code":"var _jsxFileName = \"/Users/jovangoh/Desktop/myburger-react-redux/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components/UI/Input/Input';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      console.log(updatedFormElement);\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    ;\n    const form = formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      errorId: formElement.config.elementConfig.placeholder,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"SUBMIT\")));\n  }\n\n}\n\n;\nexport default Auth;","map":{"version":3,"sources":["/Users/jovangoh/Desktop/myburger-react-redux/src/containers/Auth/Auth.js"],"names":["React","Component","Button","Input","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","inputChangedHandler","event","inputIdentifier","updatedOrderForm","orderForm","updatedFormElement","target","checkValidity","console","log","formIsValid","setState","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components/UI/Input/Input';\n\nclass Auth extends Component {\n    state = {\n        controls : {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6,\n                },\n                valid: false,\n                touched: false\n            },\n        }\n    };\n\n    checkValidity(value,rules){\n        let isValid = true;\n        if(rules.required){\n            isValid = value.trim() !== '' && isValid;\n        }\n        if(rules.minLength){\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if(rules.maxLength){\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n        return isValid;\n    };\n    //this will turn state.valid to true\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {...this.state.orderForm};\n        const updatedFormElement = {...updatedOrderForm[inputIdentifier]};\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\n        updatedFormElement.touched= true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        console.log(updatedFormElement);\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;}\n            \n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n\n    render () {\n        const formElementsArray=[];\n        for(let key in this.state.controls){\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key],\n            })\n        };\n        const form = formElementsArray.map(formElement=>(\n                <Input \n                    key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    errorId={formElement.config.elementConfig.placeholder}\n                    changed={(event)=>this.inputChangedHandler(event, formElement.id)}/>\n                ));\n\n        return (\n            <div>\n                <form>                \n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n            </div>\n        );\n    }\n};\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}