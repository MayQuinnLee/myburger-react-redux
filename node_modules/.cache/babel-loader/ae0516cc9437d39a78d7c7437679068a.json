{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\nconst initialState = {\n  ingredients: null,\n  totalPrice: 4,\n  error: false\n};\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_ING:\n      const updatedIngredient = {\n        [action.ingType]: state.ingredients[action.ingType] + 1\n      };\n      const updatedIngredients = updateObject(state.ingredients, updatedIngredient);\n      const updatedState = {\n        ingredients: updatedIngredients,\n        totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingType]\n      };\n      return updateObject(state, updatedState);\n    //...state\n    //...state.ingredients\n    //...state.ingredients.name\n    //...state.totalPrice \n\n    case actionTypes.REMOVE_ING:\n      const updatedIng = {\n        [action.ingType]: state.ingredients[action.ingType] - 1\n      };\n      const updatedIngs = updateObject(state.ingredients, updatedIng);\n      const updatedSt = {\n        ingredients: updatedIngs,\n        totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingType]\n      };\n      return updateObject(state, updatedSt);\n\n    case actionTypes.SET_ING:\n      return updateObject(state, {\n        ingredients: {\n          salad: action.ingredients.salad,\n          bacon: action.ingredients.bacon,\n          meat: action.ingredients.meat,\n          cheese: action.ingredients.cheese\n        },\n        error: false,\n        totalPrice: 4\n      });\n\n    case actionTypes.FETCH_ING_FAILED:\n      return updateObject(state, {\n        error: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/jovangoh/Desktop/myburger-react-redux/src/store/reducers/burgerBuilder.js"],"names":["actionTypes","updateObject","initialState","ingredients","totalPrice","error","INGREDIENT_PRICES","salad","cheese","meat","bacon","reducer","state","action","type","ADD_ING","updatedIngredient","ingType","updatedIngredients","updatedState","REMOVE_ING","updatedIng","updatedIngs","updatedSt","SET_ING","FETCH_ING_FAILED"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAAQC,YAAR,QAA2B,YAA3B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE,IADI;AAEjBC,EAAAA,UAAU,EAAE,CAFK;AAGjBC,EAAAA,KAAK,EAAE;AAHU,CAArB;AAMA,MAAMC,iBAAiB,GAAG;AACtBC,EAAAA,KAAK,EAAE,GADe;AAEtBC,EAAAA,MAAM,EAAE,GAFc;AAGtBC,EAAAA,IAAI,EAAE,GAHgB;AAItBC,EAAAA,KAAK,EAAE;AAJe,CAA1B;;AAOA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAACV,YAAP,EAAqBW,MAArB,KAAgC;AAC5C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKd,WAAW,CAACe,OAAjB;AACI,YAAMC,iBAAiB,GAAG;AAAE,SAACH,MAAM,CAACI,OAAR,GAAkBL,KAAK,CAACT,WAAN,CAAkBU,MAAM,CAACI,OAAzB,IAAoC;AAAxD,OAA1B;AACA,YAAMC,kBAAkB,GAAGjB,YAAY,CAACW,KAAK,CAACT,WAAP,EAAmBa,iBAAnB,CAAvC;AACA,YAAMG,YAAY,GAAG;AACjBhB,QAAAA,WAAW,EAAEe,kBADI;AAEjBd,QAAAA,UAAU,EAAEQ,KAAK,CAACR,UAAN,GAAmBE,iBAAiB,CAACO,MAAM,CAACI,OAAR;AAF/B,OAArB;AAIA,aAAOhB,YAAY,CAACW,KAAD,EAAQO,YAAR,CAAnB;AACA;AACA;AACA;AACA;;AACJ,SAAKnB,WAAW,CAACoB,UAAjB;AACI,YAAMC,UAAU,GAAG;AAAE,SAACR,MAAM,CAACI,OAAR,GAAkBL,KAAK,CAACT,WAAN,CAAkBU,MAAM,CAACI,OAAzB,IAAoC;AAAxD,OAAnB;AACA,YAAMK,WAAW,GAAGrB,YAAY,CAACW,KAAK,CAACT,WAAP,EAAmBkB,UAAnB,CAAhC;AACA,YAAME,SAAS,GAAG;AACdpB,QAAAA,WAAW,EAAEmB,WADC;AAEdlB,QAAAA,UAAU,EAAEQ,KAAK,CAACR,UAAN,GAAmBE,iBAAiB,CAACO,MAAM,CAACI,OAAR;AAFlC,OAAlB;AAIA,aAAOhB,YAAY,CAACW,KAAD,EAAQW,SAAR,CAAnB;;AACJ,SAAKvB,WAAW,CAACwB,OAAjB;AACI,aAAOvB,YAAY,CAACW,KAAD,EAAQ;AACvBT,QAAAA,WAAW,EAAE;AACTI,UAAAA,KAAK,EAAEM,MAAM,CAACV,WAAP,CAAmBI,KADjB;AAETG,UAAAA,KAAK,EAAEG,MAAM,CAACV,WAAP,CAAmBO,KAFjB;AAGTD,UAAAA,IAAI,EAAEI,MAAM,CAACV,WAAP,CAAmBM,IAHhB;AAITD,UAAAA,MAAM,EAAEK,MAAM,CAACV,WAAP,CAAmBK;AAJlB,SADU;AAMvBH,QAAAA,KAAK,EAAE,KANgB;AAOvBD,QAAAA,UAAU,EAAE;AAPW,OAAR,CAAnB;;AASJ,SAAKJ,WAAW,CAACyB,gBAAjB;AACI,aAAOxB,YAAY,CAACW,KAAD,EAAQ;AAACP,QAAAA,KAAK,EAAE;AAAR,OAAR,CAAnB;;AACJ;AACI,aAAOO,KAAP;AAlCR;AAoCH,CArCD;;AAuCA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {\n    ingredients: null,\n    totalPrice: 4,\n    error: false\n};\n\nconst INGREDIENT_PRICES = {\n    salad: 0.5,\n    cheese: 0.4,\n    meat: 1.3,\n    bacon: 0.7\n};\n\nconst reducer = (state=initialState, action) => {\n    switch(action.type){\n        case actionTypes.ADD_ING:\n            const updatedIngredient = { [action.ingType]: state.ingredients[action.ingType] + 1 };\n            const updatedIngredients = updateObject(state.ingredients,updatedIngredient);\n            const updatedState = {\n                ingredients: updatedIngredients,\n                totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingType]\n            };\n            return updateObject(state, updatedState);\n            //...state\n            //...state.ingredients\n            //...state.ingredients.name\n            //...state.totalPrice \n        case actionTypes.REMOVE_ING:\n            const updatedIng = { [action.ingType]: state.ingredients[action.ingType] - 1 };\n            const updatedIngs = updateObject(state.ingredients,updatedIng);\n            const updatedSt = {\n                ingredients: updatedIngs,\n                totalPrice: state.totalPrice + INGREDIENT_PRICES[action.ingType]\n            };\n            return updateObject(state, updatedSt);\n        case actionTypes.SET_ING:\n            return updateObject(state, {\n                ingredients: {\n                    salad: action.ingredients.salad,\n                    bacon: action.ingredients.bacon,\n                    meat: action.ingredients.meat,\n                    cheese: action.ingredients.cheese},\n                error: false,\n                totalPrice: 4\n            })\n        case actionTypes.FETCH_ING_FAILED:\n            return updateObject(state, {error: true})\n        default: \n            return state\n    }\n}\n\nexport default reducer;\n\n"]},"metadata":{},"sourceType":"module"}