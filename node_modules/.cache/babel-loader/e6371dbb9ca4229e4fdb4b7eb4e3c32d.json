{"ast":null,"code":"import * as actionTypes from './actionTypes';\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFail = error => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n};\naxios.post('/orders.json', order) //.json for firebase only\n.then(response => {\n  this.setState({\n    loading: false\n  });\n  this.props.history.push('/');\n}).catch(error => {\n  this.setState({\n    loading: false\n  });\n});","map":{"version":3,"sources":["/Users/jovangoh/Desktop/myburger-react-redux/src/store/actions/order.js"],"names":["actionTypes","purchaseBurgerSuccess","id","orderData","type","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","error","PURCHASE_BURGER_FAIL","axios","post","order","then","response","setState","loading","props","history","push","catch"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,EAAD,EAAKC,SAAL,KAAmB;AACpD,SAAM;AACFC,IAAAA,IAAI,EAAEJ,WAAW,CAACK,uBADhB;AAEFC,IAAAA,OAAO,EAAEJ,EAFP;AAGFC,IAAAA,SAAS,EAAEA;AAHT,GAAN;AAKH,CANM;AAQP,OAAO,MAAMI,kBAAkB,GAAIC,KAAD,IAAW;AACzC,SAAM;AACFJ,IAAAA,IAAI,EAAEJ,WAAW,CAACS,oBADhB;AAEFD,IAAAA,KAAK,EAAEA;AAFL,GAAN;AAIH,CALM;AAOPE,KAAK,CAACC,IAAN,CAAW,cAAX,EAA2BC,KAA3B,EAAkC;AAAlC,CACCC,IADD,CACMC,QAAQ,IAAI;AACd,OAAKC,QAAL,CAAc;AAACC,IAAAA,OAAO,EAAE;AAAV,GAAd;AACA,OAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH,CAJD,EAKCC,KALD,CAKOZ,KAAK,IAAI;AACZ,OAAKO,QAAL,CAAc;AAACC,IAAAA,OAAO,EAAE;AAAV,GAAd;AACH,CAPD","sourcesContent":["import * as actionTypes from './actionTypes';\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n    return{\n        type: actionTypes.PURCHASE_BURGER_SUCCESS,\n        orderId: id,\n        orderData: orderData\n    }\n};\n\nexport const purchaseBurgerFail = (error) => {\n    return{\n        type: actionTypes.PURCHASE_BURGER_FAIL,\n        error: error\n    }\n}\n\naxios.post('/orders.json', order) //.json for firebase only\n.then(response => {\n    this.setState({loading: false});\n    this.props.history.push('/');\n})\n.catch(error => {\n    this.setState({loading: false})\n})"]},"metadata":{},"sourceType":"module"}