{"ast":null,"code":"var _jsxFileName = \"/Users/jovangoh/Desktop/myburger-react/src/hoc/withErrorHandler/withErrorHandler.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../hoc/Aux/Aux';\nimport Modal from '../../components/UI/Modal/Modal';\n\nconst withErrorHandler = (WrappedComponent, axios) => {\n  var _temp;\n\n  return _temp = class extends Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        error: null\n      };\n\n      this.errorConfirmedHandler = () => {\n        this.setState({\n          error: null\n        });\n      };\n    }\n\n    componentDidMount() {\n      axios.interceptor.request.use(req => {\n        this.setState({\n          error: null\n        });\n      }); //not concern on the request, but want to clear the error\n\n      axios.interceptor.response.use(null, error => {\n        this.setState({\n          error: error\n        });\n      });\n    }\n\n    render() {\n      return React.createElement(Aux, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        show: this.state.error,\n        modalClosed: this.errorConfirmedHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, this.state.error ? this.state.error.message : null, \" \"), React.createElement(WrappedComponent, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      })));\n    }\n\n  }, _temp;\n};\n\nexport default withErrorHandler;","map":{"version":3,"sources":["/Users/jovangoh/Desktop/myburger-react/src/hoc/withErrorHandler/withErrorHandler.js"],"names":["React","Component","Aux","Modal","withErrorHandler","WrappedComponent","axios","state","error","errorConfirmedHandler","setState","componentDidMount","interceptor","request","use","req","response","render","message","props"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,KAAP,MAAkB,iCAAlB;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,gBAAD,EAAmBC,KAAnB,KAA6B;AAAA;;AAClD,iBAAO,cAAcL,SAAd,CAAwB;AAAA;AAAA;AAAA,WAC3BM,KAD2B,GACnB;AACJC,QAAAA,KAAK,EAAE;AADH,OADmB;;AAAA,WAa3BC,qBAb2B,GAaJ,MAAK;AACxB,aAAKC,QAAL,CAAc;AAACF,UAAAA,KAAK,EAAC;AAAP,SAAd;AACH,OAf0B;AAAA;;AAI3BG,IAAAA,iBAAiB,GAAI;AACjBL,MAAAA,KAAK,CAACM,WAAN,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA8BC,GAAG,IAAI;AACjC,aAAKL,QAAL,CAAc;AAACF,UAAAA,KAAK,EAAE;AAAR,SAAd;AACH,OAFD,EADiB,CAGd;;AACHF,MAAAA,KAAK,CAACM,WAAN,CAAkBI,QAAlB,CAA2BF,GAA3B,CAA+B,IAA/B,EAAqCN,KAAK,IAAI;AAC1C,aAAKE,QAAL,CAAc;AAACF,UAAAA,KAAK,EAAEA;AAAR,SAAd;AACH,OAFD;AAGH;;AAMDS,IAAAA,MAAM,GAAI;AACN,aACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AACA,QAAA,IAAI,EAAE,KAAKV,KAAL,CAAWC,KADjB;AAEA,QAAA,WAAW,EAAE,KAAKC,qBAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGK,KAAKF,KAAL,CAAWC,KAAX,GAAmB,KAAKD,KAAL,CAAWC,KAAX,CAAiBU,OAApC,GAA8C,IAHnD,MADJ,EAMI,oBAAC,gBAAD,oBAAsB,KAAKC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SANJ,CADJ;AAUH;;AA5B0B,GAA/B;AA+BH,CAhCD;;AAkCA,eAAef,gBAAf","sourcesContent":["import React, {Component} from 'react';\nimport Aux from '../../hoc/Aux/Aux'\nimport Modal from '../../components/UI/Modal/Modal';\n\nconst withErrorHandler = (WrappedComponent, axios) => {\n    return class extends Component {\n        state = {\n            error: null,\n        }\n        componentDidMount () {\n            axios.interceptor.request.use(req => {\n                this.setState({error: null})\n            }) //not concern on the request, but want to clear the error\n            axios.interceptor.response.use(null, error => {\n                this.setState({error: error})\n            })\n        }\n\n        errorConfirmedHandler =() =>{\n            this.setState({error:null})\n        }\n\n        render () {\n            return (\n                <Aux> \n                    <Modal \n                    show={this.state.error}\n                    modalClosed={this.errorConfirmedHandler}>\n                        {this.state.error ? this.state.error.message : null} {/*message property return by Firebase*/}\n                    </Modal>\n                    <WrappedComponent {...this.props} />\n                </Aux>\n            )\n        }\n\n    }\n}\n\nexport default withErrorHandler;"]},"metadata":{},"sourceType":"module"}