{"ast":null,"code":"var _jsxFileName = \"/Users/jovangoh/Desktop/myburger-react-redux/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components/UI/Input/Input';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedControls) {\n        formIsValid = updatedControls[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n  }\n\n  componentDidMount() {\n    //if we are not building a burger and we are not at homepage, then redirect to homepage\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    ;\n    let form = formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      errorId: formElement.config.elementConfig.placeholder,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }));\n\n    if (this.props.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      });\n    }\n\n    ;\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = React.createElement(Redirect, {\n        to: this.props.authRedirectPath,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.Auth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, authRedirect, this.props.error ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, this.props.error.message) : null, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"SUBMIT\")), React.createElement(Button, {\n      clicked: this.switchAuthModeHandler,\n      btnType: \"Danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \" SWITCH TO \", this.state.isSignup ? 'SIGN IN' : 'SIGN UP', \" \"));\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token != null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/')) //if user click through 'authentication' always reset the url, so hard coding is fine\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/jovangoh/Desktop/myburger-react-redux/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Redirect","Button","Input","classes","actions","Spinner","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","switchAuthModeHandler","setState","prevState","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","formIsValid","inputIdentifier","orderForm","submitHandler","preventDefault","props","onAuth","componentDidMount","buildingBurger","authRedirectPath","onSetAuthRedirectPath","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","loading","authRedirect","isAuthenticated","error","message","mapStateToProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;AAEA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,OAAOC,OAAP,MAAoB,qCAApB;;AAEA,MAAMC,IAAN,SAAmBR,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACzBS,KADyB,GACjB;AACJC,MAAAA,QAAQ,EAAG;AACPC,QAAAA,KAAK,EAAE;AACHC,UAAAA,WAAW,EAAE,OADV;AAEHC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,OADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFZ;AAMHC,UAAAA,KAAK,EAAE,EANJ;AAOHC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERC,YAAAA,OAAO,EAAE;AAFD,WAPT;AAWHC,UAAAA,KAAK,EAAE,KAXJ;AAYHC,UAAAA,OAAO,EAAE;AAZN,SADA;AAePC,QAAAA,QAAQ,EAAE;AACNV,UAAAA,WAAW,EAAE,OADP;AAENC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,UADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFT;AAMNC,UAAAA,KAAK,EAAE,EAND;AAONC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERK,YAAAA,SAAS,EAAE;AAFH,WAPN;AAWNH,UAAAA,KAAK,EAAE,KAXD;AAYNC,UAAAA,OAAO,EAAE;AAZH;AAfH,OADP;AA+BJG,MAAAA,QAAQ,EAAE;AA/BN,KADiB;;AAAA,SAyCzBC,qBAzCyB,GAyCD,MAAM;AAC1B,WAAKC,QAAL,CAAcC,SAAS,IAAI;AACvB,eAAO;AAACH,UAAAA,QAAQ,EAAE,CAACG,SAAS,CAACH;AAAtB,SAAP;AACH,OAFD;AAGH,KA7CwB;;AAAA,SAsEzBI,mBAtEyB,GAsEH,CAACC,KAAD,EAAQC,WAAR,KAAwB;AAC1C,YAAMC,eAAe,GAAG,EACpB,GAAG,KAAKtB,KAAL,CAAWC,QADM;AAEpB,SAACoB,WAAD,GAAe,EACX,GAAG,KAAKrB,KAAL,CAAWC,QAAX,CAAoBoB,WAApB,CADQ;AAEXd,UAAAA,KAAK,EAAEa,KAAK,CAACG,MAAN,CAAahB,KAFT;AAGXI,UAAAA,KAAK,EAAE,KAAKa,aAAL,CAAmBJ,KAAK,CAACG,MAAN,CAAahB,KAAhC,EAAuC,KAAKP,KAAL,CAAWC,QAAX,CAAoBoB,WAApB,EAAiCb,UAAxE,CAHI;AAIXI,UAAAA,OAAO,EAAE;AAJE;AAFK,OAAxB;AASA,WAAKK,QAAL,CAAc;AAAChB,QAAAA,QAAQ,EAAEqB;AAAX,OAAd;AAEA,UAAIG,WAAW,GAAG,IAAlB;;AACA,WAAK,IAAIC,eAAT,IAA4BJ,eAA5B,EAA6C;AACzCG,QAAAA,WAAW,GAAGH,eAAe,CAACI,eAAD,CAAf,CAAiCf,KAAjC,IAA0Cc,WAAxD;AAAqE;;AAEzE,WAAKR,QAAL,CAAc;AAACU,QAAAA,SAAS,EAAEL,eAAZ;AAA6BG,QAAAA,WAAW,EAAEA;AAA1C,OAAd;AACH,KAvFwB;;AAAA,SAyFzBG,aAzFyB,GAyFRR,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACS,cAAN;AACA,WAAKC,KAAL,CAAWC,MAAX,CAAkB,KAAK/B,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BK,KAA5C,EAAmD,KAAKP,KAAL,CAAWC,QAAX,CAAoBY,QAApB,CAA6BN,KAAhF,EAAuF,KAAKP,KAAL,CAAWe,QAAlG;AACH,KA5FwB;AAAA;;AAmCzBiB,EAAAA,iBAAiB,GAAE;AACf;AACA,QAAG,CAAC,KAAKF,KAAL,CAAWG,cAAZ,IAA8B,KAAKH,KAAL,CAAWI,gBAAX,KAA8B,GAA/D,EAAmE;AAC/D,WAAKJ,KAAL,CAAWK,qBAAX;AACH;AACJ;;AAODX,EAAAA,aAAa,CAACjB,KAAD,EAAO6B,KAAP,EAAa;AACtB,QAAIC,OAAO,GAAG,IAAd;;AACA,QAAGD,KAAK,CAAC3B,QAAT,EAAkB;AACd4B,MAAAA,OAAO,GAAG9B,KAAK,CAAC+B,IAAN,OAAiB,EAAjB,IAAuBD,OAAjC;AACH;;AACD,QAAGD,KAAK,CAACtB,SAAT,EAAmB;AACfuB,MAAAA,OAAO,GAAG9B,KAAK,CAACgC,MAAN,IAAgBH,KAAK,CAACtB,SAAtB,IAAmCuB,OAA7C;AACH;;AACD,QAAGD,KAAK,CAACI,SAAT,EAAmB;AACfH,MAAAA,OAAO,GAAG9B,KAAK,CAACgC,MAAN,IAAgBH,KAAK,CAACI,SAAtB,IAAmCH,OAA7C;AACH;;AACD,QAAID,KAAK,CAAC1B,OAAV,EAAmB;AACf,YAAM+B,OAAO,GAAG,uIAAhB;AACAJ,MAAAA,OAAO,GAAGI,OAAO,CAACC,IAAR,CAAanC,KAAb,KAAuB8B,OAAjC;AACH;;AACD,QAAID,KAAK,CAACO,SAAV,EAAqB;AACjB,YAAMF,OAAO,GAAG,OAAhB;AACAJ,MAAAA,OAAO,GAAGI,OAAO,CAACC,IAAR,CAAanC,KAAb,KAAuB8B,OAAjC;AACH;;AACD,WAAOA,OAAP;AACH;;AA2BDO,EAAAA,MAAM,GAAI;AACN,UAAMC,iBAAiB,GAAC,EAAxB;;AACA,SAAI,IAAIC,GAAR,IAAe,KAAK9C,KAAL,CAAWC,QAA1B,EAAmC;AAC/B4C,MAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACnBC,QAAAA,EAAE,EAAEF,GADe;AAEnBG,QAAAA,MAAM,EAAE,KAAKjD,KAAL,CAAWC,QAAX,CAAoB6C,GAApB;AAFW,OAAvB;AAIH;;AAAA;AAED,QAAII,IAAI,GAAGL,iBAAiB,CAACM,GAAlB,CAAsBC,WAAW,IACxC,oBAAC,KAAD;AACI,MAAA,GAAG,EAAEA,WAAW,CAACJ,EADrB;AAEI,MAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmB9C,WAFpC;AAGI,MAAA,aAAa,EAAEiD,WAAW,CAACH,MAAZ,CAAmB7C,aAHtC;AAII,MAAA,KAAK,EAAEgD,WAAW,CAACH,MAAZ,CAAmB1C,KAJ9B;AAKI,MAAA,OAAO,EAAE,CAAC6C,WAAW,CAACH,MAAZ,CAAmBtC,KALjC;AAMI,MAAA,cAAc,EAAEyC,WAAW,CAACH,MAAZ,CAAmBzC,UANvC;AAOI,MAAA,OAAO,EAAE4C,WAAW,CAACH,MAAZ,CAAmBrC,OAPhC;AAQI,MAAA,OAAO,EAAEwC,WAAW,CAACH,MAAZ,CAAmB7C,aAAnB,CAAiCE,WAR9C;AASI,MAAA,OAAO,EAAGc,KAAD,IAAS,KAAKD,mBAAL,CAAyBC,KAAzB,EAAgCgC,WAAW,CAACJ,EAA5C,CATtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADO,CAAX;;AAaA,QAAG,KAAKlB,KAAL,CAAWuB,OAAd,EAAsB;AAClBH,MAAAA,IAAI,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACC;;AAAA;AAEL,QAAII,YAAY,GAAG,IAAnB;;AACA,QAAG,KAAKxB,KAAL,CAAWyB,eAAd,EAA8B;AAC1BD,MAAAA,YAAY,GAAG,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAE,KAAKxB,KAAL,CAAWI,gBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAf;AACH;;AAED,WACI;AAAK,MAAA,SAAS,EAAEtC,OAAO,CAACG,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKuD,YADL,EAEK,KAAKxB,KAAL,CAAW0B,KAAX,GAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAK1B,KAAL,CAAW0B,KAAX,CAAiBC,OAArB,CAAnB,GAAuD,IAF5D,EAGI;AAAM,MAAA,QAAQ,EAAE,KAAK7B,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKsB,IADL,EAEI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,CAHJ,EAOI,oBAAC,MAAD;AACA,MAAA,OAAO,EAAI,KAAKlC,qBADhB;AAEA,MAAA,OAAO,EAAC,QAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAE6B,KAAKhB,KAAL,CAAWe,QAAX,GAAsB,SAAtB,GAAkC,SAF/D,MAPJ,CADJ;AAaH;;AA1IwB;;AA2I5B;;AAED,MAAM2C,eAAe,GAAG1D,KAAK,IAAI;AAC7B,SAAM;AACFqD,IAAAA,OAAO,EAAErD,KAAK,CAAC2D,IAAN,CAAWN,OADlB;AAEFG,IAAAA,KAAK,EAAExD,KAAK,CAAC2D,IAAN,CAAWH,KAFhB;AAGFD,IAAAA,eAAe,EAAEvD,KAAK,CAAC2D,IAAN,CAAWC,KAAX,IAAoB,IAHnC;AAIF3B,IAAAA,cAAc,EAAEjC,KAAK,CAAC6D,aAAN,CAAoBC,QAJlC;AAKF5B,IAAAA,gBAAgB,EAAElC,KAAK,CAAC2D,IAAN,CAAWzB;AAL3B,GAAN;AAOH,CARD;;AAUA,MAAM6B,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAM;AACFjC,IAAAA,MAAM,EAAG,CAAC7B,KAAD,EAAQW,QAAR,EAAkBE,QAAlB,KAA+BiD,QAAQ,CAACnE,OAAO,CAAC8D,IAAR,CAAazD,KAAb,EAAoBW,QAApB,EAA8BE,QAA9B,CAAD,CAD9C;AAEFoB,IAAAA,qBAAqB,EAAE,MAAM6B,QAAQ,CAACnE,OAAO,CAACoE,mBAAR,CAA4B,GAA5B,CAAD,CAFnC,CAGF;;AAHE,GAAN;AAKH,CAND;;AAQA,eAAezE,OAAO,CAACkE,eAAD,EAAkBK,kBAAlB,CAAP,CAA6ChE,IAA7C,CAAf","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\n\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components/UI/Input/Input';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Auth extends Component {\n    state = {\n        controls : {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6,\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        isSignup: true,\n    };\n\n    componentDidMount(){\n        //if we are not building a burger and we are not at homepage, then redirect to homepage\n        if(!this.props.buildingBurger && this.props.authRedirectPath!=='/'){\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup: !prevState.isSignup}\n        })\n    };\n\n    checkValidity(value,rules){\n        let isValid = true;\n        if(rules.required){\n            isValid = value.trim() !== '' && isValid;\n        }\n        if(rules.minLength){\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if(rules.maxLength){\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n        return isValid;\n    };\n    //this will turn state.valid to true\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true,\n            }\n        };\n        this.setState({controls: updatedControls});\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedControls) {\n            formIsValid = updatedControls[inputIdentifier].valid && formIsValid;}\n            \n        this.setState({orderForm: updatedControls, formIsValid: formIsValid});\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    render () {\n        const formElementsArray=[];\n        for(let key in this.state.controls){\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key],\n            })\n        };\n\n        let form = formElementsArray.map(formElement=>(\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                errorId={formElement.config.elementConfig.placeholder}\n                changed={(event)=>this.inputChangedHandler(event, formElement.id)}/>\n            ));\n\n        if(this.props.loading){\n            form = <Spinner />\n            };\n\n        let authRedirect = null;\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to={this.props.authRedirectPath}/> \n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {this.props.error ? <p>{this.props.error.message}</p> : null}\n                <form onSubmit={this.submitHandler}>                \n                    {form}\n                    <Button btnType=\"Success\" >SUBMIT</Button>\n                </form>\n                <Button \n                clicked = {this.switchAuthModeHandler}\n                btnType='Danger'> SWITCH TO {this.state.isSignup ? 'SIGN IN' : 'SIGN UP'} </Button>\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return{\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token != null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        onAuth : (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n        //if user click through 'authentication' always reset the url, so hard coding is fine\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}