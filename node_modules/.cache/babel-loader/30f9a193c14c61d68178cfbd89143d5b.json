{"ast":null,"code":"var _jsxFileName = \"/Users/jovangoh/Desktop/myburger-react-redux/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport * as actions from '../../../store/actions/index';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport { updateObject } from '../../../shared/utility';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-mail'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: true\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      const formData = {};\n\n      for (let key in this.state.orderForm) {\n        formData[key] = this.state.orderForm[key].value;\n      }\n\n      const order = {\n        ingredients: this.props.ings,\n        price: this.props.totalP,\n        orderData: formData,\n        userId: this.props.userId\n      };\n      this.props.onOrderBurger(order, this.props.token);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedFormElement = updateObject(updatedOrderForm[inputIdentifier], {\n        value: event.target.value,\n        valid: this.checkValidity(updatedFormElement.value, updatedFormElement.validation),\n        touched: true\n      });\n      const updatedOrderForm = updateObject(this.state.orderForm, {\n        [inputIdentifier]: updatedFormElement\n      });\n      console.log(updatedFormElement);\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    ;\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      errorId: formElement.config.elementConfig.placeholder,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    })), React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"ORDER\"));\n\n    if (this.props.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      });\n    }\n\n    ;\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \" Please enter your Contact Data\"), form);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    totalP: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/Users/jovangoh/Desktop/myburger-react-redux/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","Button","classes","axios","Spinner","Input","actions","withErrorHandler","updateObject","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","key","order","ingredients","props","ings","price","totalP","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updatedOrderForm","target","checkValidity","console","log","setState","rules","isValid","trim","length","pattern","test","isNumeric","render","formElementsArray","push","id","config","form","map","formElement","loading","mapStateToProps","burgerBuilder","totalPrice","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React , {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport * as actions from '../../../store/actions/index';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport {updateObject} from '../../../shared/utility';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {   \n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue:'Fastest'},\n                        {value: 'cheapest', displayValue:'Cheapest'}\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true,\n            },\n        },\n        formIsValid: true,\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for (let key in this.state.orderForm){\n            formData[key]=this.state.orderForm[key].value;\n        }\n        const order = {\n            ingredients: this.props.ings, \n            price: this.props.totalP,\n            orderData: formData,\n            userId: this.props.userId\n        };\n        this.props.onOrderBurger(order, this.props.token);\n    };\n\n    checkValidity(value,rules){\n        let isValid = true;\n        if(rules.required){\n            isValid = value.trim() !== '' && isValid;\n        }\n        if(rules.minLength){\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if(rules.maxLength){\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedFormElement = updateObject(updatedOrderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: this.checkValidity(updatedFormElement.value,updatedFormElement.validation),\n            touched: true ,\n        });\n        const updatedOrderForm = updateObject(this.state.orderForm, {\n            [inputIdentifier]: updatedFormElement\n        })\n        console.log(updatedFormElement);\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;}\n            \n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n\n    render () {\n        const formElementsArray=[];\n        for(let key in this.state.orderForm){\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key],\n            })\n        };\n        let form = (\n            <form onSubmit={this.orderHandler}>\n              {formElementsArray.map(formElement=>(\n                  <Input \n                  key={formElement.id}\n                  elementType={formElement.config.elementType}\n                  elementConfig={formElement.config.elementConfig}\n                  value={formElement.config.value}\n                  invalid={!formElement.config.valid}\n                  shouldValidate={formElement.config.validation}\n                  touched={formElement.config.touched}\n                  errorId={formElement.config.elementConfig.placeholder}\n                  changed={(event)=>this.inputChangedHandler(event, formElement.id)}/>\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        ); \n        if(this.props.loading){\n            form = <Spinner />\n        };\n        return (\n          <div className={classes.ContactData}>\n            <h4> Please enter your Contact Data</h4>\n            {form}\n          </div>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.burgerBuilder.ingredients,\n        totalP: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token)),\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));"]},"metadata":{},"sourceType":"module"}