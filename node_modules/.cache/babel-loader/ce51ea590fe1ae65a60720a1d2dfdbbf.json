{"ast":null,"code":"var _jsxFileName = \"/Users/jovangoh/Desktop/myburger-react/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../hoc/Aux/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: {\n        salad: 0,\n        bacon: 0,\n        cheese: 0,\n        meat: 0\n      },\n      totalPrice: 4,\n      purchasable: false,\n      purchasing: false,\n      loading: false\n    };\n\n    this.addIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.removeIngredientHandler = type => {\n      const oldCount = this.state.ingredients[type];\n\n      if (oldCount <= 0) {\n        return;\n      }\n\n      const updatedCount = oldCount - 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const priceDeduction = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice - priceDeduction;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      this.setState({\n        loading: true\n      });\n      const order = {\n        ingredients: this.state.ingredients,\n        price: this.state.totalPrice,\n        customer: {\n          name: 'Jovan Goh',\n          address: {\n            street: 'TestStreet',\n            zipCode: 56330,\n            country: 'Malaysia'\n          },\n          email: 'jojo@test.com'\n        },\n        deliveryMethod: 'ASAP'\n      };\n      axios.post('/orders.json', order) //.json for firebase only\n      .then(response => {\n        this.setState({\n          loading: false,\n          purchasing: false\n        });\n      }).catch(error => {\n        this.setState({\n          loading: false,\n          purchasing: false\n        });\n      }); // alert('You continue!');\n    };\n  }\n\n  updatePurchaseState(ingredients) {\n    const sum = Object.keys(ingredients).map(igKey => {\n      return ingredients[igKey];\n    }).reduce((sum, el) => {\n      return sum + el;\n    }, 0);\n    this.setState({\n      purchasable: sum > 0\n    });\n  }\n\n  render() {\n    const disabledInfo = { ...this.state.ingredients\n    };\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    } // {salad: true, meat: false, ...}\n\n\n    let orderSummary = React.createElement(OrderSummary, {\n      ingredients: this.state.ingredients,\n      price: this.state.totalPrice,\n      purchaseCancelled: this.purchaseCancelHandler,\n      purchaseContinued: this.purchaseContinueHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    });\n\n    if (this.state.loading) {\n      orderSummary = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      show: this.state.purchasing,\n      modalClosed: this.purchaseCancelHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, orderSummary), React.createElement(Burger, {\n      ingredients: this.state.ingredients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }), React.createElement(BuildControls, {\n      ingredientAdded: this.addIngredientHandler,\n      ingredientRemoved: this.removeIngredientHandler,\n      disabled: disabledInfo,\n      purchasable: this.state.purchasable,\n      ordered: this.purchaseHandler,\n      price: this.state.totalPrice,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BurgerBuilder;","map":{"version":3,"sources":["/Users/jovangoh/Desktop/myburger-react/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BuildControls","Modal","OrderSummary","axios","Spinner","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalPrice","purchasable","purchasing","loading","addIngredientHandler","type","oldCount","updatedCount","updatedIngredients","priceAddition","oldPrice","newPrice","setState","updatePurchaseState","removeIngredientHandler","priceDeduction","purchaseHandler","purchaseCancelHandler","purchaseContinueHandler","order","price","customer","name","address","street","zipCode","country","email","deliveryMethod","post","then","response","catch","error","sum","Object","keys","map","igKey","reduce","el","render","disabledInfo","key","orderSummary"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Aux from '../../hoc/Aux/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BuildControls from '../../components/Burger/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nconst INGREDIENT_PRICES = {\n    salad: 0.5,\n    cheese: 0.4,\n    meat: 1.3,\n    bacon: 0.7\n};\n\nclass BurgerBuilder extends Component {\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {...}\n    // }\n    state = {\n        ingredients: {\n            salad: 0,\n            bacon: 0,\n            cheese: 0,\n            meat: 0\n        },\n        totalPrice: 4,\n        purchasable: false,\n        purchasing: false,\n        loading: false,\n    }\n\n    updatePurchaseState (ingredients) {\n        const sum = Object.keys( ingredients )\n            .map( igKey => {\n                return ingredients[igKey];\n            } )\n            .reduce( ( sum, el ) => {\n                return sum + el;\n            }, 0 );\n        this.setState( { purchasable: sum > 0 } );\n    }\n\n    addIngredientHandler = ( type ) => {\n        const oldCount = this.state.ingredients[type];\n        const updatedCount = oldCount + 1;\n        const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceAddition = INGREDIENT_PRICES[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice + priceAddition;\n        this.setState( { totalPrice: newPrice, ingredients: updatedIngredients } );\n        this.updatePurchaseState(updatedIngredients);\n    }\n\n    removeIngredientHandler = ( type ) => {\n        const oldCount = this.state.ingredients[type];\n        if ( oldCount <= 0 ) {\n            return;\n        }\n        const updatedCount = oldCount - 1;\n        const updatedIngredients = {\n            ...this.state.ingredients\n        };\n        updatedIngredients[type] = updatedCount;\n        const priceDeduction = INGREDIENT_PRICES[type];\n        const oldPrice = this.state.totalPrice;\n        const newPrice = oldPrice - priceDeduction;\n        this.setState( { totalPrice: newPrice, ingredients: updatedIngredients } );\n        this.updatePurchaseState(updatedIngredients);\n    }\n\n    purchaseHandler = () => {\n        this.setState({purchasing: true});\n    }\n\n    purchaseCancelHandler = () => {\n        this.setState({purchasing: false});\n    }\n\n    purchaseContinueHandler = () => {\n        this.setState({loading: true})\n        const order = {\n            ingredients: this.state.ingredients, \n            price: this.state.totalPrice,\n            customer: {\n                name: 'Jovan Goh',\n                address: {\n                    street: 'TestStreet',\n                    zipCode: 56330,\n                    country: 'Malaysia',\n                },\n                email: 'jojo@test.com',\n            },\n            deliveryMethod: 'ASAP',\n        }\n\n        axios.post('/orders.json', order) //.json for firebase only\n            .then(response => {\n                this.setState({loading: false, purchasing: false})\n            })\n            .catch(error => {\n                this.setState({loading: false, purchasing: false})})\n        // alert('You continue!');\n    };\n\n    render () {\n        const disabledInfo = {\n            ...this.state.ingredients\n        };\n        for ( let key in disabledInfo ) {\n            disabledInfo[key] = disabledInfo[key] <= 0\n        }\n        // {salad: true, meat: false, ...}\n\n        let orderSummary = (<OrderSummary\n            ingredients={this.state.ingredients}\n            price={this.state.totalPrice}\n            purchaseCancelled={this.purchaseCancelHandler}\n            purchaseContinued={this.purchaseContinueHandler}/>);\n        \n        if(this.state.loading){\n            orderSummary = <Spinner />\n        }\n\n        return (\n            <Aux>\n                <Modal show={this.state.purchasing} modalClosed={this.purchaseCancelHandler}>\n                    {orderSummary}                  \n                </Modal>\n                <Burger ingredients={this.state.ingredients} />\n                <BuildControls\n                    ingredientAdded={this.addIngredientHandler}\n                    ingredientRemoved={this.removeIngredientHandler}\n                    disabled={disabledInfo}\n                    purchasable={this.state.purchasable}\n                    ordered={this.purchaseHandler}\n                    price={this.state.totalPrice} />\n            </Aux>\n        );\n    }\n}\n\nexport default BurgerBuilder;"]},"metadata":{},"sourceType":"module"}