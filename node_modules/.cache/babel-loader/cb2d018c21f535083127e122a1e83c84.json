{"ast":null,"code":"var _jsxFileName = \"/Users/jovangoh/Desktop/myburger-react-redux/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport * as orderActions from '../../../store/actions/index';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your E-mail'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: ''\n        }\n      },\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      const formData = {};\n\n      for (let key in this.state.orderForm) {\n        formData[key] = this.state.orderForm[key].value;\n      }\n\n      const order = {\n        ingredients: this.props.ings,\n        price: this.props.totalP,\n        orderData: formData\n      };\n      this.props.onOrderBurger(order);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      console.log(updatedFormElement);\n      this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      errorId: formElement.config.elementConfig.placeholder,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })), React.createElement(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"ORDER\"));\n\n    if (this.state.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      });\n    }\n\n    ;\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \" Please enter your Contact Data\"), form);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.ingredients,\n    totalP: state.totalPrice\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: orderData => dispatch(orderActions.onPurchaseBurgerStart(orderData))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/Users/jovangoh/Desktop/myburger-react-redux/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","Button","classes","axios","Spinner","Input","orderActions","withErrorHandler","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","loading","orderHandler","event","preventDefault","formData","key","order","ingredients","props","ings","price","totalP","orderData","onOrderBurger","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","console","log","setState","rules","isValid","trim","length","render","formElementsArray","push","id","config","form","map","formElement","mapStateToProps","totalPrice","mapDispatchToProps","dispatch","onPurchaseBurgerStart"],"mappings":"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","sourcesContent":["import React , {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport * as orderActions from '../../../store/actions/index';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {   \n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your E-mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue:'Fastest'},\n                        {value: 'cheapest', displayValue:'Cheapest'}\n                    ]\n                },\n                value: ''\n            },\n        },\n        loading: false,\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        const formData = {};\n        for (let key in this.state.orderForm){\n            formData[key]=this.state.orderForm[key].value;\n        }\n        const order = {\n            ingredients: this.props.ings, \n            price: this.props.totalP,\n            orderData: formData\n        };\n        this.props.onOrderBurger(order);\n    };\n\n    checkValidity(value,rules){\n        let isValid = true;\n        if(rules.required){\n            isValid = value.trim() !== '' && isValid;\n        }\n        if(rules.minLength){\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if(rules.maxLength){\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {...this.state.orderForm};\n        const updatedFormElement = {...updatedOrderForm[inputIdentifier]};\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\n        updatedFormElement.touched= true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        console.log(updatedFormElement);\n        this.setState({orderForm:updatedOrderForm})\n    }\n\n    render () {\n        const formElementsArray=[];\n        for(let key in this.state.orderForm){\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key],\n            })\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n              {formElementsArray.map(formElement=>(\n                  <Input \n                  key={formElement.id}\n                  elementType={formElement.config.elementType}\n                  elementConfig={formElement.config.elementConfig}\n                  value={formElement.config.value}\n                  invalid={!formElement.config.valid}\n                  shouldValidate={formElement.config.validation}\n                  touched={formElement.config.touched}\n                  errorId={formElement.config.elementConfig.placeholder}\n                  changed={(event)=>this.inputChangedHandler(event, formElement.id)}/>\n                ))}\n              <Button btnType=\"Success\">ORDER</Button>\n            </form>\n        ); \n        if(this.state.loading){\n            form = <Spinner />\n        };\n        return (\n          <div className={classes.ContactData}>\n            <h4> Please enter your Contact Data</h4>\n            {form}\n          </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings: state.ingredients,\n        totalP: state.totalPrice\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData) => dispatch(orderActions.onPurchaseBurgerStart(orderData)),\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));"]},"metadata":{},"sourceType":"module"}