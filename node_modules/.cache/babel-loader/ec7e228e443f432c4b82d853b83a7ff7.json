{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from '../../axios-orders';\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id.name,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFail = error => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = order => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post('/orders.json', order) //.json for firebase only\n    .then(response => {\n      console.log(response.data); //firebase return an id, but the id is called name = response.data.name\n\n      dispatch(purchaseBurgerSuccess(response.data, order));\n    }).catch(error => {\n      dispatch(purchaseBurgerFail(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchOrderSuccess = order => {\n  return {\n    type: actionTypes.FETCH_ORDER_SUCCESS,\n    order: order\n  };\n};\nexport const fetchOrderFail = error => {\n  return {\n    type: actionTypes.FETCH_ORDER_FAIL,\n    error: error\n  };\n};\nexport const fetchOrderStart = () => {\n  return {\n    type: actionTypes.FETCH_ORDER_START\n  };\n};\nexport const fetchOrders = () => {\n  return dispatch => {\n    axios.get('/orders.json').then(res => {\n      //firebase will return object and we convert to array\n      const fetchedOrders = []; // console.log(res.data);\n\n      for (let key in res.data) {\n        fetchedOrders.push({ ...res.data[key],\n          id: key\n        });\n      } // console.log(fetchedOrders);\n\n\n      dispatch(fetchOrderSuccess(fetchOrders));\n    }).catch(err => {\n      dispatch(fetchOrderFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/jovangoh/Desktop/myburger-react-redux/src/store/actions/order.js"],"names":["actionTypes","axios","purchaseBurgerSuccess","id","orderData","type","PURCHASE_BURGER_SUCCESS","orderId","name","purchaseBurgerFail","error","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","order","dispatch","post","then","response","console","log","data","catch","purchaseInit","PURCHASE_INIT","fetchOrderSuccess","FETCH_ORDER_SUCCESS","fetchOrderFail","FETCH_ORDER_FAIL","fetchOrderStart","FETCH_ORDER_START","fetchOrders","get","res","fetchedOrders","key","push","err"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,EAAD,EAAKC,SAAL,KAAmB;AACpD,SAAM;AACFC,IAAAA,IAAI,EAAEL,WAAW,CAACM,uBADhB;AAEFC,IAAAA,OAAO,EAAEJ,EAAE,CAACK,IAFV;AAGFJ,IAAAA,SAAS,EAAEA;AAHT,GAAN;AAKH,CANM;AAQP,OAAO,MAAMK,kBAAkB,GAAIC,KAAD,IAAW;AACzC,SAAM;AACFL,IAAAA,IAAI,EAAEL,WAAW,CAACW,oBADhB;AAEFD,IAAAA,KAAK,EAAEA;AAFL,GAAN;AAIH,CALM;AAOP,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACrC,SAAO;AACHP,IAAAA,IAAI,EAAEL,WAAW,CAACa;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAIC,KAAD,IAAW;AACrC,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACJ,mBAAmB,EAApB,CAAR;AACAX,IAAAA,KAAK,CAACgB,IAAN,CAAW,cAAX,EAA2BF,KAA3B,EAAkC;AAAlC,KACCG,IADD,CACMC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB,EADc,CACa;;AAC3BN,MAAAA,QAAQ,CAACd,qBAAqB,CAACiB,QAAQ,CAACG,IAAV,EAAgBP,KAAhB,CAAtB,CAAR;AACH,KAJD,EAKCQ,KALD,CAKOb,KAAK,IAAI;AACZM,MAAAA,QAAQ,CAACP,kBAAkB,CAACC,KAAD,CAAnB,CAAR;AACH,KAPD;AAQH,GAVD;AAWH,CAZM;AAcP,OAAO,MAAMc,YAAY,GAAG,MAAM;AAC9B,SAAM;AACFnB,IAAAA,IAAI,EAAEL,WAAW,CAACyB;AADhB,GAAN;AAGH,CAJM;AAMP,OAAO,MAAMC,iBAAiB,GAAIX,KAAD,IAAW;AACxC,SAAM;AACFV,IAAAA,IAAI,EAAEL,WAAW,CAAC2B,mBADhB;AAEFZ,IAAAA,KAAK,EAAEA;AAFL,GAAN;AAIH,CALM;AAOP,OAAO,MAAMa,cAAc,GAAIlB,KAAD,IAAW;AACrC,SAAM;AACFL,IAAAA,IAAI,EAAEL,WAAW,CAAC6B,gBADhB;AAEFnB,IAAAA,KAAK,EAAEA;AAFL,GAAN;AAIH,CALM;AAOP,OAAO,MAAMoB,eAAe,GAAE,MAAM;AAChC,SAAM;AACFzB,IAAAA,IAAI,EAAEL,WAAW,CAAC+B;AADhB,GAAN;AAGH,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC7B,SAAOhB,QAAQ,IAAI;AACff,IAAAA,KAAK,CAACgC,GAAN,CAAU,cAAV,EACCf,IADD,CACMgB,GAAG,IAAE;AACP;AACA,YAAMC,aAAa,GAAE,EAArB,CAFO,CAGP;;AACA,WAAI,IAAIC,GAAR,IAAeF,GAAG,CAACZ,IAAnB,EAAwB;AACpBa,QAAAA,aAAa,CAACE,IAAd,CAAmB,EACf,GAAGH,GAAG,CAACZ,IAAJ,CAASc,GAAT,CADY;AAEfjC,UAAAA,EAAE,EAAEiC;AAFW,SAAnB;AAIH,OATM,CAUP;;;AACApB,MAAAA,QAAQ,CAACU,iBAAiB,CAACM,WAAD,CAAlB,CAAR;AACH,KAbD,EAcCT,KAdD,CAcOe,GAAG,IAAE;AACRtB,MAAAA,QAAQ,CAACY,cAAc,CAACU,GAAD,CAAf,CAAR;AACH,KAhBD;AAiBH,GAlBD;AAmBH,CApBM","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from '../../axios-orders';\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n    return{\n        type: actionTypes.PURCHASE_BURGER_SUCCESS,\n        orderId: id.name,\n        orderData: orderData\n    }\n};\n\nexport const purchaseBurgerFail = (error) => {\n    return{\n        type: actionTypes.PURCHASE_BURGER_FAIL,\n        error: error\n    }\n}\n\nexport const purchaseBurgerStart = () => {\n    return {    \n        type: actionTypes.PURCHASE_BURGER_START,\n    }\n}\n\nexport const purchaseBurger = (order) => {\n    return dispatch => {\n        dispatch(purchaseBurgerStart());\n        axios.post('/orders.json', order) //.json for firebase only\n        .then(response => {\n            console.log(response.data) //firebase return an id, but the id is called name = response.data.name\n            dispatch(purchaseBurgerSuccess(response.data, order))\n        })\n        .catch(error => {\n            dispatch(purchaseBurgerFail(error))\n        })\n    }\n}\n\nexport const purchaseInit = () => {\n    return{\n        type: actionTypes.PURCHASE_INIT\n    }\n}\n\nexport const fetchOrderSuccess = (order) => {\n    return{\n        type: actionTypes.FETCH_ORDER_SUCCESS,\n        order: order\n    }\n}\n\nexport const fetchOrderFail = (error) => {\n    return{\n        type: actionTypes.FETCH_ORDER_FAIL,\n        error: error\n    }\n}\n\nexport const fetchOrderStart =() => {\n    return{\n        type: actionTypes.FETCH_ORDER_START,\n    }\n}\n\nexport const fetchOrders = () => {\n    return dispatch => {\n        axios.get('/orders.json')\n        .then(res=>{\n            //firebase will return object and we convert to array\n            const fetchedOrders =[];\n            // console.log(res.data);\n            for(let key in res.data){\n                fetchedOrders.push({\n                    ...res.data[key],\n                    id: key,\n                });\n            }\n            // console.log(fetchedOrders);\n            dispatch(fetchOrderSuccess(fetchOrders))\n        })\n        .catch(err=>{\n            dispatch(fetchOrderFail(err))\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}