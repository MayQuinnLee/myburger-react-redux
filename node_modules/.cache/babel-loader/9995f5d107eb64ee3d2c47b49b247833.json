{"ast":null,"code":"var _jsxFileName = \"/Users/jovangoh/Desktop/myburger-react-redux/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components/UI/Input/Input';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedControls) {\n        formIsValid = updatedControls[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedControls,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email, this.state.controls.password);\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    ;\n    const form = formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      errorId: formElement.config.elementConfig.placeholder,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: classes.Auth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.submitHandler(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"SUBMIT\")));\n  }\n\n}\n\n;\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password) => dispatch(actions.auth(email, password))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/jovangoh/Desktop/myburger-react-redux/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Button","Input","classes","actions","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","formIsValid","inputIdentifier","orderForm","submitHandler","preventDefault","props","onAuth","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","mapDispatchToProps","dispatch","auth"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components/UI/Input/Input';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\n\nclass Auth extends Component {\n    state = {\n        controls : {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6,\n                },\n                valid: false,\n                touched: false\n            },\n        }\n    };\n\n    checkValidity(value,rules){\n        let isValid = true;\n        if(rules.required){\n            isValid = value.trim() !== '' && isValid;\n        }\n        if(rules.minLength){\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if(rules.maxLength){\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n        return isValid;\n    };\n    //this will turn state.valid to true\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true,\n            }\n        };\n        this.setState({controls: updatedControls});\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedControls) {\n            formIsValid = updatedControls[inputIdentifier].valid && formIsValid;}\n            \n        this.setState({orderForm: updatedControls, formIsValid: formIsValid});\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email, this.state.controls.password);\n    }\n    \n    render () {\n        const formElementsArray=[];\n        for(let key in this.state.controls){\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key],\n            })\n        };\n        const form = formElementsArray.map(formElement=>(\n                <Input \n                    key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    errorId={formElement.config.elementConfig.placeholder}\n                    changed={(event)=>this.inputChangedHandler(event, formElement.id)}/>\n                ));\n\n        return (\n            <div className={classes.Auth}>\n                <form onSubmit={this.submitHandler()}>                \n                    {form}\n                    <Button btnType=\"Success\" >SUBMIT</Button>\n                </form>\n            </div>\n        );\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        onAuth : (email, password) => dispatch(actions.auth(email, password)),\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}